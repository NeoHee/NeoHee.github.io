<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lullaby长叶子</title>
  <subtitle>甘苦自知，惟有前行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://edmongo.cn/"/>
  <updated>2017-06-13T10:18:16.000Z</updated>
  <id>http://edmongo.cn/</id>
  
  <author>
    <name>Lullaby</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简易脚本备份数据库到邮箱</title>
    <link href="http://edmongo.cn/2017/06/13/SendMailShell/"/>
    <id>http://edmongo.cn/2017/06/13/SendMailShell/</id>
    <published>2017-06-13T09:37:39.000Z</published>
    <updated>2017-06-13T10:18:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><link rel="stylesheet" href="https://sf-static.b0.upaiyun.com/v-576b52d9/3rd/highlightjs/styles/solarized_light.css"></p>
<script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js">        </script>  
<script>hljs.initHighlightingOnLoad();</script>

<h3 id="因为数据有过丢失，前几天写了个简易脚本进行备份，现在更新上来做个备忘。"><a href="#因为数据有过丢失，前几天写了个简易脚本进行备份，现在更新上来做个备忘。" class="headerlink" title="因为数据有过丢失，前几天写了个简易脚本进行备份，现在更新上来做个备忘。"></a>因为数据有过丢失，前几天写了个简易脚本进行备份，现在更新上来做个备忘。</h3><p>首先创建一个copySql.sh</p>
<pre><code>mysqldump -h120.0.0.1 -uroot -P3306 -ppws --databases 数据库名字（多个数据库用空格隔开） &gt; /usr/local/src/mysqlBackups/database_`date &apos;+%Y-%m-%d&apos;`.sql
</code></pre><h5 id="备份数据库，并且导成文件到某个文件夹"><a href="#备份数据库，并且导成文件到某个文件夹" class="headerlink" title="备份数据库，并且导成文件到某个文件夹"></a>备份数据库，并且导成文件到某个文件夹</h5><hr>
<h3 id="使用脚本发送邮件到自己邮箱"><a href="#使用脚本发送邮件到自己邮箱" class="headerlink" title="使用脚本发送邮件到自己邮箱"></a>使用脚本发送邮件到自己邮箱</h3><pre><code>首次创建一个文件sendMail.py   (Pythone3)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys,os,re,urllib</div><div class="line"><span class="keyword">import</span> smtplib</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</div><div class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</div><div class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> strftime,gmtime</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendMail</span><span class="params">(subject,msg,toaddr,fromaddr,smtpaddr,password)</span>:</span></div><div class="line"><span class="string">'''''</span></div><div class="line">    @subject:邮件主题</div><div class="line">    @msg:邮件内容</div><div class="line">    @toaddr:收信人地址</div><div class="line">    @fromaddr:发信人地址</div><div class="line">    @smtpaddr:SMTP服务地址</div><div class="line">    @password:密码</div><div class="line">'''</div><div class="line">mail_msg = MIMEMultipart()</div><div class="line"><span class="comment">#if not isinstance(subject,unicode):</span></div><div class="line">    <span class="comment">#subject = unicode(subject,'utf-8')</span></div><div class="line">mail_msg[<span class="string">'Subject'</span>] = subject</div><div class="line">mail_msg[<span class="string">'From'</span>] = fromaddr</div><div class="line">mail_msg[<span class="string">'To'</span>] = <span class="string">','</span>.join(toaddr)</div><div class="line">mail_msg.attach(MIMEText(msg,<span class="string">'html'</span>,<span class="string">'utf-8'</span>))</div><div class="line"><span class="comment">#database_2017-06-05.sql  文件格式</span></div><div class="line">time = strftime(<span class="string">"%Y-%m-%d"</span>, gmtime())</div><div class="line">string = <span class="string">"database_"</span>+time+<span class="string">".sql"</span></div><div class="line"><span class="comment">#添加附件 </span></div><div class="line">part = MIMEApplication(open(<span class="string">'/usr/local/src/mysqlBackups/'</span>+string,<span class="string">'rb'</span>).read())  </div><div class="line">part.add_header(<span class="string">'Content-Disposition'</span>, <span class="string">'attachment'</span>, filename=string)  </div><div class="line">mail_msg.attach(part)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    s = smtplib.SMTP_SSL(smtpaddr, <span class="number">465</span>)</div><div class="line">    s.login(fromaddr,password)</div><div class="line">    s.sendmail(fromaddr,toaddr,mail_msg.as_string())</div><div class="line">    s.quit()</div><div class="line">    print(<span class="string">"Send Over!"</span>)</div><div class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">    print(<span class="string">"Error : unable to send email!"</span>)</div><div class="line">    <span class="keyword">print</span> (traceback.format_exc())</div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    fromaddr = <span class="string">"XXXXXX@qq.com"</span></div><div class="line">    smtpaddr = <span class="string">"smtp.qq.com"</span></div><div class="line">    toaddr = [<span class="string">"XXXX@hotmail.com"</span>]</div><div class="line">    subject = <span class="string">"XXXX数据库备份----请查看附件"</span></div><div class="line">    password = <span class="string">"123456"</span></div><div class="line">    msg = <span class="string">"附件XXX数据库备份"</span></div><div class="line">    sendMail(subject, msg, toaddr, fromaddr, smtpaddr, password)</div></pre></td></tr></table></figure>
<hr>
<h3 id="以上就完成了简易的脚本编写-然后开始在Linux上面（我用的CentOS-打开cron"><a href="#以上就完成了简易的脚本编写-然后开始在Linux上面（我用的CentOS-打开cron" class="headerlink" title="以上就完成了简易的脚本编写;然后开始在Linux上面（我用的CentOS)打开cron"></a>以上就完成了简易的脚本编写;然后开始在Linux上面（我用的CentOS)打开cron</h3><pre><code>crontab -e
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">使用vi编辑器编写定时任务</div><div class="line">&gt; 备份数据到指定目录</div><div class="line">&gt; <span class="number">23</span> <span class="number">23</span> * * * /usr/local/src/script/copySql.sh &gt;&gt; /usr/local/src/script/log/sendmail/copySql.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></div><div class="line">&gt; 从指定目录读取指定文件并发送给邮箱</div><div class="line">&gt; <span class="number">33</span> <span class="number">23</span> * * * PATH=/usr/local/bin python3  /usr/local/src/script/sendMail.py  &gt;&gt; /usr/local/src/script/log/sendmail/mail.log <span class="number">2</span>&gt;&amp;<span class="number">1</span></div></pre></td></tr></table></figure>
<h5 id="就这样写起了个简易的数据备份到邮箱"><a href="#就这样写起了个简易的数据备份到邮箱" class="headerlink" title="就这样写起了个简易的数据备份到邮箱"></a>就这样写起了个简易的数据备份到邮箱</h5><hr>
<h6 id="每天吃一点，终会长肉的-—"><a href="#每天吃一点，终会长肉的-—" class="headerlink" title="每天吃一点，终会长肉的^—^"></a><center><em>每天吃一点，终会长肉的^—^</em></center></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://sf-static.b0.upaiyun.com/v-576b52d9/3rd/highlightjs/styles/solarized_light.css&quot;&gt;&lt;/p&gt;
&lt;script src=&quot;ht
    
    </summary>
    
      <category term="Linux" scheme="http://edmongo.cn/categories/Linux/"/>
    
    
      <category term="Script" scheme="http://edmongo.cn/tags/Script/"/>
    
  </entry>
  
  <entry>
    <title>Spring返回XML格式数据</title>
    <link href="http://edmongo.cn/2017/06/13/Xml-SpringBoot/"/>
    <id>http://edmongo.cn/2017/06/13/Xml-SpringBoot/</id>
    <published>2017-06-13T08:00:39.000Z</published>
    <updated>2017-06-13T10:02:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先在pom文件中引入的jar包"><a href="#首先在pom文件中引入的jar包" class="headerlink" title="首先在pom文件中引入的jar包:"></a>首先在pom文件中引入的jar包:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 配置XML --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jackson-dataformat-xml&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h4 id="当然有这个是不够的-还需要做一些配置，下面是以Spring-boot中配置HttpMessageConverters为例子"><a href="#当然有这个是不够的-还需要做一些配置，下面是以Spring-boot中配置HttpMessageConverters为例子" class="headerlink" title="当然有这个是不够的,还需要做一些配置，下面是以Spring boot中配置HttpMessageConverters为例子"></a>当然有这个是不够的,还需要做一些配置，下面是以Spring boot中配置HttpMessageConverters为例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Bean</div><div class="line">public HttpMessageConverters fastJsonHttpMessageConverters() &#123;</div><div class="line">   //MappingJackson2XmlHttpMessageConverter xmlConverter = new MappingJackson2XmlHttpMessageConverter();</div><div class="line">   Jaxb2RootElementHttpMessageConverter xmlConverter = new Jaxb2RootElementHttpMessageConverter();</div><div class="line">   HttpMessageConverter&lt;?&gt; converter = xmlConverter;</div><div class="line">   return new HttpMessageConverters(converter);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="开始有使用MappingJackson2XmlHttpMessageConverter这个类来配置HttpMessageConverters-但是如果用大写来表示变量的话就会出现小写的变量-比如这样"><a href="#开始有使用MappingJackson2XmlHttpMessageConverter这个类来配置HttpMessageConverters-但是如果用大写来表示变量的话就会出现小写的变量-比如这样" class="headerlink" title="开始有使用MappingJackson2XmlHttpMessageConverter这个类来配置HttpMessageConverters,但是如果用大写来表示变量的话就会出现小写的变量,比如这样:"></a>开始有使用MappingJackson2XmlHttpMessageConverter这个类来配置HttpMessageConverters,但是如果用大写来表示变量的话就会出现小写的变量,比如这样:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;response&gt;</div><div class="line">    &lt;TEST&gt;test&lt;/TEST&gt;</div><div class="line">    &lt;MES&gt;0&lt;/MES&gt;</div><div class="line">    &lt;test&gt;test&lt;/test&gt;</div><div class="line">    &lt;mes&gt;0&lt;/mes&gt;</div><div class="line">&lt;/response&gt;</div></pre></td></tr></table></figure>
<h5 id="所以就用了Jaxb2RootElementHttpMessageConverter来进行配置，然后就这样配置，运行下去后，突然就报了错"><a href="#所以就用了Jaxb2RootElementHttpMessageConverter来进行配置，然后就这样配置，运行下去后，突然就报了错" class="headerlink" title="所以就用了Jaxb2RootElementHttpMessageConverter来进行配置，然后就这样配置，运行下去后，突然就报了错"></a>所以就用了Jaxb2RootElementHttpMessageConverter来进行配置，然后就这样配置，运行下去后，突然就报了错</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">类的两个属性具有相同名称 &quot;BGYS&quot;</div><div class="line">    this problem is related to the following location:</div><div class="line">        at public java.lang.String com.knot.bean.PacsResultBean.getBGYS()</div><div class="line">        at com.knot.bean.PacsResultBean</div><div class="line">        at public java.util.List com.knot.bean.Response.item</div><div class="line">        at com.knot.bean.Response</div><div class="line">    this problem is related to the following location:</div><div class="line">        at public java.lang.String com.knot.bean.PacsResultBean.BGYS</div><div class="line">        at com.knot.bean.PacsResultBean</div><div class="line">        at public java.util.List com.knot.bean.Response.item</div><div class="line">        at com.knot.bean.Response</div></pre></td></tr></table></figure>
<h5 id="然后在对应字段的get方法上面加上-XmlTransient注解就可以了，不会报错了-本以为这样就顺利的会得到XML格式的文本了，结果依然报错了这一次报错的信息是"><a href="#然后在对应字段的get方法上面加上-XmlTransient注解就可以了，不会报错了-本以为这样就顺利的会得到XML格式的文本了，结果依然报错了这一次报错的信息是" class="headerlink" title="然后在对应字段的get方法上面加上 @XmlTransient注解就可以了，不会报错了,本以为这样就顺利的会得到XML格式的文本了，结果依然报错了这一次报错的信息是:"></a>然后在对应字段的get方法上面加上 @XmlTransient注解就可以了，不会报错了,本以为这样就顺利的会得到XML格式的文本了，结果依然报错了这一次报错的信息是:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[com.sun.istack.internal.SAXException2: class com.knot.bean.PacsResultBean以及其任何超类对此上下文都是未知的。</div><div class="line">javax.xml.bind.JAXBException: class com.knot.bean.PacsResultBean以及其任何超类对此上下文都是未知的。]</div><div class="line">2017-06-13 16:47:00.514 ERROR 6852 --- [io-8081-exec-20] o.a.c.c.C.[.[.[.[dispatcherServlet]      : Servlet.service() for servlet dispatcherServlet threw exception</div><div class="line"></div><div class="line">java.lang.IllegalStateException: getOutputStream() has already been called for this response</div></pre></td></tr></table></figure>
<h5 id="看到这个错误信息我也是很懵逼啊，找了半天才发现是自己的一个数组用了泛型，然后对应类找不到对应的实体所以就报错了，所以要在泛型的字段上面加上这个"><a href="#看到这个错误信息我也是很懵逼啊，找了半天才发现是自己的一个数组用了泛型，然后对应类找不到对应的实体所以就报错了，所以要在泛型的字段上面加上这个" class="headerlink" title="看到这个错误信息我也是很懵逼啊，找了半天才发现是自己的一个数组用了泛型，然后对应类找不到对应的实体所以就报错了，所以要在泛型的字段上面加上这个:"></a>看到这个错误信息我也是很懵逼啊，找了半天才发现是自己的一个数组用了泛型，然后对应类找不到对应的实体所以就报错了，所以要在泛型的字段上面加上这个:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@XmlElement </div><div class="line">public String resultCode = &quot;0&quot;;</div><div class="line">@XmlElement </div><div class="line">public String resultMessage=&quot;SUCCESS&quot;;</div><div class="line">@XmlElements(&#123;</div><div class="line">    @XmlElement(name=&quot;item&quot;,type=有用到的实体类都要加上  实体类.class),</div><div class="line">    @XmlElement(name=&quot;item&quot;,type=ItemBean.class)</div><div class="line">&#125;)</div><div class="line">public List&lt;T&gt; item;</div></pre></td></tr></table></figure>
<h5 id="如果有实体类没有加上去，那么就会解析失败报其任何超类对此上下文都是未知的错误。"><a href="#如果有实体类没有加上去，那么就会解析失败报其任何超类对此上下文都是未知的错误。" class="headerlink" title="如果有实体类没有加上去，那么就会解析失败报其任何超类对此上下文都是未知的错误。"></a>如果有实体类没有加上去，那么就会解析失败报其任何超类对此上下文都是未知的错误。</h5><hr>
<h6 id="每天吃一点，终会长肉的-—"><a href="#每天吃一点，终会长肉的-—" class="headerlink" title="每天吃一点，终会长肉的^—^"></a><center><em>每天吃一点，终会长肉的^—^</em></center></h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先在pom文件中引入的jar包&quot;&gt;&lt;a href=&quot;#首先在pom文件中引入的jar包&quot; class=&quot;headerlink&quot; title=&quot;首先在pom文件中引入的jar包:&quot;&gt;&lt;/a&gt;首先在pom文件中引入的jar包:&lt;/h3&gt;&lt;figure class=&quot;
    
    </summary>
    
      <category term="Java" scheme="http://edmongo.cn/categories/Java/"/>
    
    
      <category term="Spring Boot" scheme="http://edmongo.cn/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>一点JavaGC的认知</title>
    <link href="http://edmongo.cn/2017/06/08/GCList/"/>
    <id>http://edmongo.cn/2017/06/08/GCList/</id>
    <published>2017-06-08T08:53:11.000Z</published>
    <updated>2017-06-13T10:03:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、开启GC日志（分析所使用的工具为LOG日志文件"><a href="#1、开启GC日志（分析所使用的工具为LOG日志文件" class="headerlink" title="1、开启GC日志（分析所使用的工具为LOG日志文件)"></a>1、开启GC日志（分析所使用的工具为LOG日志文件)</h3><p>-verbose:gc<br>-XX:+PrintGCDetails<br>-XX:+PrintGCDateStamps<br>-Xloggc:/path/gc.log<br>-XX:+UseGCLogFileRotation  启用GC日志文件的自动转储 (Since Java)<br>-XX:NumberOfGClogFiles=1  GC日志文件的循环数目 (Since Java)<br>-XX:GCLogFileSize=1M  控制GC日志文件的大小 (Since Java)<br>-XX:+PrintGC包含-verbose:gc<br>-XX:+PrintGCDetails //包含-XX:+PrintGC<br>只要设置-XX:+PrintGCDetails 就会自动带上-verbose:gc和-XX:+PrintGC</p>
<p>-XX:+PrintGCDateStamps/-XX:+PrintGCTimeStamps 输出gc的触发时间<br>参数示例:<br>-XX:+PrintGCDetails -Xloggc:C:\Users\Administrator\Desktop\gc.log</p>
<p>GC参数:<br>堆设置<br>-Xms :初始堆大小<br>-Xmx :最大堆大小<br>-XX:NewSize=n :设置年轻代大小<br>-XX:NewRatio=n: 设置年轻代和年老代的比值。如:为3，表示年轻代与年老代比值为1：3，年轻代占整个年轻代年老代和的1/4<br>-XX:SurvivorRatio=n :年轻代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：3，表示Eden：Survivor=3：2，一个Survivor区占整个年轻代的1/5<br>-XX:MaxPermSize=n :设置持久代大小<br>收集器设置  </p>
<table>
<thead>
<tr>
<th>指定方式</th>
<th style="text-align:center">新生代GC</th>
<th style="text-align:right">旧生代GC</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseSerialGC</td>
<td style="text-align:center">串行GC</td>
<td style="text-align:right">串行GC</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td style="text-align:center">并行回收GC</td>
<td style="text-align:right">并行GC</td>
</tr>
<tr>
<td>-XX:+UseConeMarkSweepGC</td>
<td style="text-align:center">并行GC</td>
<td style="text-align:right">并发GC</td>
</tr>
<tr>
<td>-XX:+UseParNewGC</td>
<td style="text-align:center">并行GC</td>
<td style="text-align:right">串行GC</td>
</tr>
<tr>
<td>-XX:+UseParallelOldGC</td>
<td style="text-align:center">并行回收GC</td>
<td style="text-align:right">并行GC</td>
</tr>
<tr>
<td>-XX:+UseConeMarkSweepGC<br>-XX:+UseParNewGC</td>
<td style="text-align:center">串行GC</td>
<td style="text-align:right">并发GC</td>
</tr>
<tr>
<td>不支持组合</td>
<td style="text-align:center">-XX:+UseParNewGC <br>-XX:+UseParallelOldGC</td>
<td style="text-align:right">-XX:+UseParNewGC <br>-XX:+UseSerialGC</td>
</tr>
</tbody>
</table>
<p>-XX:+UseSerialGC : 指定JVM使用串行收集器  (新生代，老年代都使用串行回收收集器)<br>-XX:+UserParNewGC(新生代使用并行收集器，老年代使用串行回收收集器)<br>-XX:+UseParallelGC 指定JVM使用并行收集器  （新生代使用并行回收收集器，老年代使用串行收集器）<br>-XX:+UseParalledlOldGC :指定JVM使用并行年老代收集器 (新生代，老年代都是用并行回收收集器)<br>-XX:+UseConcMarkSweepGC :指定JVM使用并发收集器(新生代使用并行收集器，老年代使用串行收集器)<br>垃圾回收统计信息<br>-XX:+PrintHeapAtGC GC的heap详情<br>-XX:+PrintGCDetails  GC详情<br>-XX:+PrintGCTimeStamps  打印GC时间信息<br>-XX:+PrintTenuringDistribution    打印年龄信息等<br>-XX:+HandlePromotionFailure   老年代分配担保（true  or false）<br>并行收集器设置<br>-XX:ParallelGCThreads=n :设置并行收集器收集时使用的CPU数。并行收集线程数。<br>-XX:MaxGCPauseMillis=n :设置并行收集最大暂停时间<br>-XX:GCTimeRatio=n :设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)<br>并发收集器设置<br>-XX:+CMSIncrementalMode :设置为增量模式。适用于单CPU情况。<br>-XX:ParallelGCThreads=n :设置并发收集器年轻代收集方式为并行收集时，使用的CPU数。并行收集线程数。</p>
<h3 id="2、在log里面会得到这样的日志"><a href="#2、在log里面会得到这样的日志" class="headerlink" title="2、在log里面会得到这样的日志:"></a>2、在log里面会得到这样的日志:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Java HotSpot(TM) 64-Bit Server VM (25.91-b14) for windows-amd64 JRE (1.8.0_91-b14), built on Apr  1 2016 00:58:32 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</div><div class="line">Memory: 4k page, physical 12499492k(4312872k free), swap 24997124k(15220376k free)</div><div class="line">CommandLine flags: -XX:InitialHeapSize=199991872 -XX:MaxHeapSize=3199869952 -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC </div><div class="line">Heap</div><div class="line"> PSYoungGen      total 57344K, used 7864K [0x0000000780700000, 0x0000000784700000, 0x00000007c0000000)</div><div class="line">  eden space 49152K, 16% used [0x0000000780700000,0x0000000780eae3e8,0x0000000783700000)</div><div class="line">  from space 8192K, 0% used [0x0000000783f00000,0x0000000783f00000,0x0000000784700000)</div><div class="line">  to   space 8192K, 0% used [0x0000000783700000,0x0000000783700000,0x0000000783f00000)</div><div class="line"> ParOldGen       total 131072K, used 0K [0x0000000701400000, 0x0000000709400000, 0x0000000780700000)</div><div class="line">  object space 131072K, 0% used [0x0000000701400000,0x0000000701400000,0x0000000709400000)</div><div class="line"> Metaspace       used 5461K, capacity 5520K, committed 5760K, reserved 1056768K</div><div class="line">  class space    used 614K, capacity 632K, committed 640K, reserved 1048576K</div></pre></td></tr></table></figure>
<h3 id="3、然后把对应GClog丢到www-gceasy-io然后就可以看对应图标进行分析、这应该算是查看JVM开销最小的一种方式"><a href="#3、然后把对应GClog丢到www-gceasy-io然后就可以看对应图标进行分析、这应该算是查看JVM开销最小的一种方式" class="headerlink" title="3、然后把对应GClog丢到www.gceasy.io然后就可以看对应图标进行分析、这应该算是查看JVM开销最小的一种方式"></a>3、然后把对应GClog丢到www.gceasy.io然后就可以看对应图标进行分析、这应该算是查看JVM开销最小的一种方式</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、开启GC日志（分析所使用的工具为LOG日志文件&quot;&gt;&lt;a href=&quot;#1、开启GC日志（分析所使用的工具为LOG日志文件&quot; class=&quot;headerlink&quot; title=&quot;1、开启GC日志（分析所使用的工具为LOG日志文件)&quot;&gt;&lt;/a&gt;1、开启GC日志（分
    
    </summary>
    
      <category term="Java" scheme="http://edmongo.cn/categories/Java/"/>
    
      <category term="Tomcat" scheme="http://edmongo.cn/categories/Java/Tomcat/"/>
    
    
      <category term="JVM" scheme="http://edmongo.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>关于Restful的一点认知</title>
    <link href="http://edmongo.cn/2017/06/08/Restful/"/>
    <id>http://edmongo.cn/2017/06/08/Restful/</id>
    <published>2017-06-08T08:53:11.000Z</published>
    <updated>2017-06-13T10:05:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浅尝Restful风格"><a href="#浅尝Restful风格" class="headerlink" title="浅尝Restful风格"></a>浅尝Restful风格</h3><p>简单的理解，Restful是一种URL<em>风格</em>,或者说是<em>规范</em>,在以前的网址中，假定一个业务取得数据网址为<a href="http://demo/get" target="_blank" rel="external">http://demo/get</a>，添加信息的网址为<a href="http://demo/post" target="_blank" rel="external">http://demo/post</a>，类似这样。<br>但是在Restful风格中；取得数据和添加数据均应为<a href="http://demo" target="_blank" rel="external">http://demo</a>,方法为get或者post;所以，在Restful风格里面，一个网址就是一个资源；</p>
<p>其形式类似于<a href="http://xxx.com/xx/{id}/{id}" target="_blank" rel="external">http://xxx.com/xx/{id}/{id}</a>,例如某购物网站，产品有很多种类，每种产品下有很多子类型，那么<a href="http://shopping.com/top/apple/A103" target="_blank" rel="external">http://shopping.com/top/apple/A103</a> 代表了苹果A103型号电脑，而<a href="http://shopping.com/top/hp/1033" target="_blank" rel="external">http://shopping.com/top/hp/1033</a>代表了1033型号电脑</p>
<p>在SpringMVC中。有@RequestParm,@RequestBody,@PathVariable三种注解来获取浏览器端的参数，其中前两种都是取Post方式传输机进来的参数，而@PathVariable则是从网址中取得参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Requestmapping（value=&quot;/&#123;category&#125;/&#123;brand&#125;/&#123;id&#125;,method=RequestMethod.POST）</div><div class="line">public void getInfoByID(@PathVariable(&quot;category&quot;) String category</div><div class="line">                                     @PathVariable(&quot;brand&quot;) String brand</div><div class="line">                                     @PathVariable(&quot;id&quot;) String id)&#123;</div><div class="line">                                     //具体业务逻辑实现</div><div class="line">                                     &#125;</div></pre></td></tr></table></figure>
<p>在上述代码中，访问<a href="http://shopping.com/top/hp/1033" target="_blank" rel="external">http://shopping.com/top/hp/1033</a>网址时，则，category为“top”，brand为”hp”,id为”1033”；所以说，在restful风格中，一个网址即表示了一个资源。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浅尝Restful风格&quot;&gt;&lt;a href=&quot;#浅尝Restful风格&quot; class=&quot;headerlink&quot; title=&quot;浅尝Restful风格&quot;&gt;&lt;/a&gt;浅尝Restful风格&lt;/h3&gt;&lt;p&gt;简单的理解，Restful是一种URL&lt;em&gt;风格&lt;/em&gt;,或者说
    
    </summary>
    
      <category term="Java" scheme="http://edmongo.cn/categories/Java/"/>
    
    
      <category term="Restful" scheme="http://edmongo.cn/tags/Restful/"/>
    
      <category term="Spring" scheme="http://edmongo.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>安装FreeSwitch</title>
    <link href="http://edmongo.cn/2017/06/08/FreeSwitch/"/>
    <id>http://edmongo.cn/2017/06/08/FreeSwitch/</id>
    <published>2017-06-08T07:33:35.000Z</published>
    <updated>2017-06-13T09:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、安装FreeSwitch的依赖（已CentOs为例）"><a href="#1、安装FreeSwitch的依赖（已CentOs为例）" class="headerlink" title="1、安装FreeSwitch的依赖（已CentOs为例）"></a>1、安装FreeSwitch的依赖（已CentOs为例）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install git autoconf automake nano libtool gcc-c++ ncurses-devel make expat-devel zlib zlib-devel libjpeg-devel unixODBC-devel openssl-devel gnutls-devel libogg-devel libvorbis-devel curl-devel libtiff-devel mysql-server php php-mysql php-posix php-gd php-xml subversion python-devel bzip2 sqlite-devel libcurl-devel pcre pcre-devel speex speex-devel libedit-devel bison</div></pre></td></tr></table></figure>
<h3 id="2、安装FreeSwitch"><a href="#2、安装FreeSwitch" class="headerlink" title="2、安装FreeSwitch"></a>2、安装FreeSwitch</h3><p>git下载freeswitch v1.4版本代码，并移动到/usr/local/src目录<br><a href="https://freeswitch.org/stash/projects/FS/repos/freeswitch/browse" target="_blank" rel="external">https://freeswitch.org/stash/projects/FS/repos/freeswitch/browse</a><br><a href="https://freeswitch.org/stash/scm/fs/freeswitch.git" target="_blank" rel="external">https://freeswitch.org/stash/scm/fs/freeswitch.git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git clone -b v1.4 https://stash.freeswitch.org/scm/fs/freeswitch.git</div><div class="line">mv freeswitch/ /usr/local/src</div><div class="line"></div><div class="line">cd /usr/local/src/freeswitch</div><div class="line">./bootstrap.sh</div><div class="line">./configure --enable-core-odbc-support</div></pre></td></tr></table></figure>
<p>修改module.conf文件，打开一些扩展，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">applications/mod_blacklist</div><div class="line">applications/mod_callcenter</div><div class="line">applications/mod_curl</div><div class="line">applications/mod_spy</div><div class="line">applications/mod_directory</div><div class="line">applications/mod_distributor</div><div class="line">formats/mod_shout</div></pre></td></tr></table></figure></p>
<p>开始编译文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost freeswitch]#./bootstrap.sh </div><div class="line">[root@localhost freeswitch]#./configure </div><div class="line">[root@localhost freeswitch]#make </div><div class="line">[root@localhost freeswitch]# make install </div><div class="line">[root@localhost freeswitch]#make all cd-sounds-install cd-moh-install</div></pre></td></tr></table></figure></p>
<h3 id="3、启动freeswitch，不显示命令控制台。"><a href="#3、启动freeswitch，不显示命令控制台。" class="headerlink" title="3、启动freeswitch，不显示命令控制台。"></a>3、启动freeswitch，不显示命令控制台。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">freeswitch -nc</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、安装FreeSwitch的依赖（已CentOs为例）&quot;&gt;&lt;a href=&quot;#1、安装FreeSwitch的依赖（已CentOs为例）&quot; class=&quot;headerlink&quot; title=&quot;1、安装FreeSwitch的依赖（已CentOs为例）&quot;&gt;&lt;/a&gt;1、
    
    </summary>
    
      <category term="Linux" scheme="http://edmongo.cn/categories/Linux/"/>
    
    
      <category term="FreeSwitch" scheme="http://edmongo.cn/tags/FreeSwitch/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot-JavaMail</title>
    <link href="http://edmongo.cn/2017/06/06/SpringBoot-JavaMail/"/>
    <id>http://edmongo.cn/2017/06/06/SpringBoot-JavaMail/</id>
    <published>2017-06-06T15:29:43.000Z</published>
    <updated>2017-06-13T10:08:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>###首先在Spring Boot的工程中的 pom.xml 中引入 spring-boot-starter-mail 依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;  </div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>###然后以QQ邮箱为例，在 application.properties 中加入如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">spring.mail.host=smtp.qq.com</div><div class="line">spring.mail.username=用户名  </div><div class="line">spring.mail.password=密码</div><div class="line">spring.mail.properties.mail.smtp.auth=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.enable=true</div><div class="line">spring.mail.properties.mail.smtp.starttls.required=true</div></pre></td></tr></table></figure></p>
<p>####这样配置方面就完成了</p>
<p>###通过测试来实现一封简单邮件的发送：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">private JavaMailSender mailSender;</div><div class="line"></div><div class="line">public void sendSmpleMail() throws Exception&#123;</div><div class="line">	SimpleMailMessage message = new SimpleMailMessage();</div><div class="line">	message.setFrom(&quot;testFrom@qq.com&quot;);</div><div class="line">	message.setTo(&quot;test@qq.com&quot;);</div><div class="line">	message.setSubject(&quot;主题&quot;);</div><div class="line">	message.setText(&quot;Test Mail&quot;);</div><div class="line"></div><div class="line">	mailSender.send(message);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###首先在Spring Boot的工程中的 pom.xml 中引入 spring-boot-starter-mail 依赖：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;di
    
    </summary>
    
      <category term="Java" scheme="http://edmongo.cn/categories/Java/"/>
    
    
      <category term="Spring" scheme="http://edmongo.cn/tags/Spring/"/>
    
  </entry>
  
</feed>
